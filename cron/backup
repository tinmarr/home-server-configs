#!/usr/bin/env bash

CHAPPY_BUCKET="chappy-data-backup"
SENTRY_BUCKET="sentry-data-backup"

# Args:
#   1. Filename - will be prepended by the date and appended with .tar.gz
#   2. Folder - the folder or file to archive
#   3. Bucket - the b2 bucket to use
_backup_folder() {
    echo "$(date): Creating Backup"
    filename="$(date +'%FT%H%M%S')-$1.tar.gz"
    tar czf $filename $2

    enc_filename=encrypted-$filename.gpg
    gpg --output $enc_filename --encrypt -r 15B87AFCCED88630 $filename



    echo "$(date): Saving Backup Locally"
    mv $filename ~/backup_disk

    count=$(( $(ls -1 ~/backup_disk | grep $1 | wc -l) - 2 ))
    if [[ $count -lt 0 ]]; then
        count=0
    fi
    for item in $(ls -1 ~/backup_disk | grep $1 | head -n $count); do
        echo "removing: $item"
        rm ~/backup_disk/$item
    done


    echo "$(date): Saving Backup to Backblaze"
    rclone move $enc_filename b2:$3 --b2-disable-checksum --transfers 32

    count=$(( $(rclone lsf b2:$3 | grep $1 | wc -l) - 1 ))
    if [[ $count -lt 0 ]]; then
        count=0
    fi
    for item in $(rclone lsf b2:$3 | grep $1 | head -n $count); do
        echo "removing: $item"
        rclone deletefile --b2-hard-delete b2:$3/$item
    done
}

cd ~
##############################
echo "$(date): Backing up notes"
cd ~/notes
git add .
git commit --no-gpg-sign -m "backup"
git push
cd ~

##############################
echo "$(date): Backing up Actual Budget"
_backup_folder actual actual-data $CHAPPY_BUCKET

##############################
echo "$(date): Backing up Vaultwarden"
sqlite3 ~/vw-data/db.sqlite3 ".backup '/home/martin/vw-data/db-backup.sqlite3'"

_backup_folder vw vw-data $CHAPPY_BUCKET

##############################
cd sentry
echo "$(date): Backing up Sentry"
sqlite3 db/db.sqlite3 ".backup '/home/martin/sentry/db/db-backup.sqlite3'"
sqlite3 db/superset.db ".backup '/home/martin/sentry/db/superset-backup.db'"

_backup_folder sentry db $SENTRY_BUCKET

cd ~

##############################
echo "$(date): Backing up photos"

docker exec -t immich_postgres pg_dumpall --clean --if-exists --username=postgres | gzip > "/home/martin/media/photos/dump.sql.gz"
_backup_folder photos "$(echo ./media/photos/{library,profile,upload,dump.sql.gz})" $CHAPPY_BUCKET
rm ./media/photos/dump.sql.gz # Don't need to save random dumps

echo "$(date): Done"
